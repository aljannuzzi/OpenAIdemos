
//Unit Tests:
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.DurableTask;
using Microsoft.Extensions.Logging;
using Moq;
using Saga.Common.Commands;
using Saga.Functions.Factories;
using Saga.Functions.Services;
using Saga.Orchestration.Factories;
using Saga.Orchestration.Models;
using Saga.Orchestration.Models.Activity;
using Saga.Orchestration.Models.Producer;
using Saga.Orchestration.Models.Transaction;

namespace Saga.Functions.Tests
{
    [TestClass]
    public class OrchestratorTests
    {
        [TestMethod]
        public void SagaOrchestrator_ReturnsSuccess_WhenAllCommandsSucceed()
        {
            // Arrange
            var contextMock = new Mock<IDurableOrchestrationContext>();
            var logMock = new Mock<ILogger>();
            var item = new TransactionItem();
            var commandProducers = new Dictionary<string, Func<Task<ActivityResult<ProducerResult>>>>
            {
                [nameof(ValidateTransferCommand)] = () => ActivityFactory.ProduceValidateTransferCommandAsync(item, contextMock.Object, logMock.Object)
            };
            var sagaStatePersisters = new Dictionary<string, Func<Task<bool>>>
            {
                [nameof(SagaState.Success)] = () => SagaFactory.PersistSagaStateAsync(item, SagaState.Success, contextMock.Object, logMock.Object)
            };
            contextMock.Setup(x => x.GetInput<TransactionItem>()).Returns(item);

            // Act
            var result = Orchestrator.SagaOrchestrator(contextMock.Object, logMock.Object).Result;

            // Assert
            Assert.AreEqual(SagaState.Success, result);
        }

        [TestMethod]
        public void SagaOrchestrator_ThrowsArgumentException_WhenCommandsFail()
        {
            // Arrange
            var contextMock = new Mock<IDurableOrchestrationContext>();
            var logMock = new Mock<ILogger>();
            var item = new TransactionItem();
            var commandProducers = new Dictionary<string, Func<Task<ActivityResult<ProducerResult>>>>
            {
                [nameof(ValidateTransferCommand)] = () => ActivityFactory.ProduceValidateTransferCommandAsync(item, contextMock.Object, logMock.Object)
            };
            var sagaStatePersisters = new Dictionary<string, Func<Task<bool>>>
            {
                [nameof(SagaState.Fail)] = () => SagaFactory.PersistSagaStateAsync(item, SagaState.Fail, contextMock.Object, logMock.Object)
            };
            contextMock.Setup(x => x.GetInput<TransactionItem>()).Returns(item);

            // Act
            void TestCode() => Orchestrator.SagaOrchestrator(contextMock.Object, logMock.Object).Wait();

            // Assert
            Assert.ThrowsException<ArgumentException>(TestCode);
        }
    }
}